git_repository(
    name = "io_bazel_rules_python",
    remote = "https://github.com/bazelbuild/rules_python.git",
    # NOT VALID!  Replace this with a Git commit SHA.
    commit = "{HEAD}",
)

# Only needed for PIP support:
load("@io_bazel_rules_python//python:pip.bzl", 
    "pip_repositories",
    "pip_import")

pip_repositories()


# This rule translates the specified requirements.txt into
# @my_deps//:requirements.bzl, which itself exposes a pip_install method.
pip_import(
   name = "my_deps",
   requirements = "//path/to:requirements.txt",
)

# Load the pip_install symbol for my_deps, and create the dependencies'
# repositories.
load("@piptool_deps//:requirements.bzl",
    _piptool_install = "pip_install",
)

_piptool_install()

# Subpar is a utility for creating self-contained python executables. It is designed to work well with Bazel.
git_repository(
    name = "subpar",
    remote = "https://github.com/google/subpar",
    # HEAD as of 2018/02/15
    commit = "1f695ee5d42585a66d9dd9b71219eb8551e59c89",
)


http_file(
    name = "grpc_whl",
    sha256 = "c232d6d168cb582e5eba8e1c0da8d64b54b041dd5ea194895a2fe76050916561",
    # From https://pypi.python.org/pypi/grpcio/1.6.0
    url = ("https://pypi.python.org/packages/c6/28/" +
           "67651b4eabe616b27472c5518f9b2aa3f63beab8f62100b26f05ac428639/" +
           "grpcio-1.6.0-cp27-cp27m-manylinux1_i686.whl"),
)